非跨域名的SSO解决方案:
A. Cookie方案：
1、采用浏览器客户端的cookie存储在线用户信息数据
2、用户信息数据加密存储和传输
3、子域名应用程序共享解密方法和密码

好处：机制简单，避免了webserver集群造成的会话数据同步问题。有一定的安全性。
坏处：cookie存取的数据量有限。无法跨域。

B. Session方案：
1、采用服务器端储存在线用户信息数据
2、子域名共享根域名的session id.
3、用户数据无需加密。
4、web集群服务器需通过数据库或者memcached共享用户数据。

好处：安全性高。能解决webserver集群的会话数据共享问题。
坏处：无法跨域。稍微复杂，采用数据库有瓶颈问题要解决，采用memcached需要部署memcached服务器。



跨域名的SSO解决方案

思路：

1、用户访问应用服务SP，SP判断用户是否在本地已经登录，未登录则调用 sso client api访问 sso server，需要带上数字签名signature，user_name 和 domain信息。
（用户想进入公园某景点，工作人员判断此用户是否已经检过票？没有则去售票处咨询，将营业执照(数字签名)传输到售票内部系统。）

2、sso server 接收到来自client的信息后，先认证client是否合法，即签名校验。然后从本机session判断user_name是否存在，存在则返回session id，即票证ticket；ticket不存在就转跳到登录界面。。
（售票处检测此用户是否有买过票？有的话则直接将票证返回给景点，没有则要求用户去买票）

3、用户在身份认证中心登录成功后，sso server在session中保存用户信息。然后转跳回应用服务SP，URL带上ticket(session id)。
（用户在售票处掏钱买票，售票处登记，发给用户票证）

4、应用服务通过SSO client 插件,再次带上ticket，domain和signature(此时signature由 ticket加密得到)访问 SSO Server，SSO Server先进行授权判断，然后返回加密的用户token数据。
 （用户来到某景点入口，景点将用户票证，景点营业执照通过内部系统发送到售票处查证，售票处系统检测此景点是否合法的，合法同时票证有效，则返回
 用户的基本信息给景点去做进一步操作）

5、用户信息数据是加密传输，SSO client 插件通过private key解密token数据。
  （景点需要安装解密系统）
  
6、如果用户已经在步骤 3 登录过了，则跳过此步骤。

客户端插件功能:
1、数字签名程序。
2、解密数据程序。

服务器端功能：
1、添加client到数据库并生成密钥。
2、验证client的签名程序。
3、加密用户数据程序。
4、一个判断登录接口和一个获取在线用户数据接口。

优点：实现跨域，安全性高
缺点：复杂，需要开发客户端插件。